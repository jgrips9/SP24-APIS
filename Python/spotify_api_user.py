# -*- coding: utf-8 -*-
"""Spotify API User.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ml8HQKsFTE4Um4huFgEJE8E5Xii-SBCO
"""

!pip install spotipy
!pip install pandas

import spotipy

from spotipy.oauth2 import SpotifyClientCredentials

import pandas as pd

#Go to this link to setup API
#https://developer.spotify.com/
#Input credential below.
cid = ''
secret = ''

client_credentials_manager = SpotifyClientCredentials(client_id=cid, client_secret=secret)

sp = spotipy.Spotify(client_credentials_manager = client_credentials_manager)

#Full documentation
#https://developer.spotify.com/documentation/web-api
#Album
#https://developer.spotify.com/documentation/web-api/reference/get-an-album
#Album tracks
#https://developer.spotify.com/documentation/web-api/reference/get-an-albums-tracks
#Artist albums
#https://developer.spotify.com/documentation/web-api/reference/get-an-artists-albums
#Artist top tracks
#https://developer.spotify.com/documentation/web-api/reference/get-an-artists-top-tracks
#Playlist
#https://developer.spotify.com/documentation/web-api/reference/get-playlist
#Playlist items
#https://developer.spotify.com/documentation/web-api/reference/get-playlists-tracks
#Tracks
#https://developer.spotify.com/documentation/web-api/reference/get-track
#Track audio features
#https://developer.spotify.com/documentation/web-api/reference/get-audio-features
#Audio analysis features
#https://developer.spotify.com/documentation/web-api/reference/get-audio-analysis

#This link is how to get to the playlist. Popular spotify songs tiktok 2024.
#https://open.spotify.com/playlist/6OcWuyMNKus06gmrh4FEiX?si=1333723a6eff4b7f&nd=1&dlsi=4522a9b2997c4cae
playlist = sp.user_playlist_tracks("spotify","6OcWuyMNKus06gmrh4FEiX")["items"]
#Store song id and name from playlist.
song = []
song_name = []
for track in playlist:
    song.append(track["track"]["id"])
    song_name.append(track["track"]["name"])

#Print song id
song[0]

#Store audio analysis results into an object.
test = sp.audio_analysis(song[0])
print(test)

#Tempo of an individual song.
test['track']['tempo']

#Then go to each song and extract its details.
#Link below has the fields to pull
#https://developer.spotify.com/documentation/web-api/reference/get-audio-analysis
#Doing this with a loop. Eventually put this into a function. And store results into pandas dataframe.
tempo = []
duration = []
loudness = []
tempo_conf = []
barsc = []
beatsc = []
for thing in song:
    track = sp.audio_analysis(thing)
    #Extract desired data.
    tempo.append(track['track']['tempo'])
    duration.append(track['track']['duration'])
    loudness.append(track['track']['loudness'])
    tempo_conf.append(track['track']['tempo_confidence'])
    barsc.append(len(track['bars']))
    beatsc.append(len(track['beats']))

#Then combine into pandas dataframe. Include sone name too.
import pandas as pd
data = pd.DataFrame({
    'title': song_name,
    'tempo': tempo,
    'dur': duration,
    'loud': loudness,
    'tempc': tempo_conf,
    'bars': barsc,
    'beats': beatsc
})
display(data)

#now including into a function
def spottok(creator, playlist_id):
    playlist = sp.user_playlist_tracks(creator,playlist_id)["items"]
    song = []
    song_name = []
    for track in playlist:
        song.append(track["track"]["id"])
        song_name.append(track["track"]["name"])

    tempo = []
    duration = []
    loudness = []
    tempo_conf = []
    barsc = []
    beatsc = []
    for thing in song:
        track = sp.audio_analysis(thing)
        #Extract desired data.
        tempo.append(track['track']['tempo'])
        duration.append(track['track']['duration'])
        loudness.append(track['track']['loudness'])
        tempo_conf.append(track['track']['tempo_confidence'])
        barsc.append(len(track['bars']))
        beatsc.append(len(track['beats']))

    #Then combine into pandas dataframe. Include sone name too.
    import pandas as pd
    data = pd.DataFrame({
        'title': song_name,
        'tempo': tempo,
        'dur': duration,
        'loud': loudness,
        'tempc': tempo_conf,
        'bars': barsc,
        'beats': beatsc
    })
    return data

dataset = spottok("spotify","6OcWuyMNKus06gmrh4FEiX")

display(dataset)

#Individual song
#https://open.spotify.com/track/1BxfuPKGuaTgP7aM0Bbdwr

#Get song details

#Get album of song, then those details

#Get artist, details of that.

#Look at a specific artist. Led.
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

led_uri = 'spotify:artist:36QJpDe2go2KgaRleHCDTp'
spotify = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

results = spotify.artist_albums(led_uri, album_type='album')
albums = results['items']
while results['next']:
    results = spotify.next(results)
    albums.extend(results['items'])

for album in albums:
    print(album['name'])

#Led top tracks.
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

lz_uri = 'spotify:artist:36QJpDe2go2KgaRleHCDTp'

spotify = spotipy.Spotify(client_credentials_manager=client_credentials_manager)
results = spotify.artist_top_tracks(lz_uri)

for track in results['tracks'][:10]:
    print('track    : ' + track['name'])
    print('audio    : ' + track['preview_url'])
    print('cover art: ' + track['album']['images'][0]['url'])
    print()

#Function to extract data.
def call_playlist(creator, playlist_id):

    #step1

    playlist_features_list = ["artist","release","track_name",  "track_id",  "danceability","energy","key","loudness","mode", "speechiness","instrumentalness","liveness","valence","tempo", "duration_ms","time_signature"]

    playlist_df = pd.DataFrame(columns = playlist_features_list)

    #step2

    playlist = sp.user_playlist_tracks(creator, playlist_id)["items"]
    for track in playlist:
        # Create empty dict
        playlist_features = {}
        # Get metadata
        playlist_features["artist"] = track["track"]["album"]["artists"][0]["name"]
        playlist_features["release"] = track["track"]["album"]["release_date"]
        playlist_features["track_name"] = track["track"]["name"]
        playlist_features["track_id"] = track["track"]["id"]

        # Get audio features
        audio_features = sp.audio_features(playlist_features["track_id"])[0]
        for feature in playlist_features_list[5:]:
            playlist_features[feature] = audio_features[feature]

        # Concat the dfs
        track_df = pd.DataFrame(playlist_features, index = [0])
        playlist_df = pd.concat([playlist_df, track_df], ignore_index = True)

    #Step 3

    return playlist_df

#Apply function for specific spotify playlist.
call_playlist("spotify","7vI0tN3yUn07dkK9T6p2pg")

#Sources
#https://www.linkedin.com/pulse/extracting-your-fav-playlist-info-spotifys-api-samantha-jones